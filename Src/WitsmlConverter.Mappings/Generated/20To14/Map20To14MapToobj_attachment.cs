////////////////////////////////////////////////////////////////////////
//
// Map20To14MapToobj_attachment.cs
//
// This file was generated by MapForce 2023sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;



namespace Map20To14
{

	public class Map20To14MapToobj_attachment : Altova.TraceProvider
	{
		private bool runDoesCloseAll = true;
		public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; }	}


		#region Members		
		// instances
		protected XmlNode m_Attachment2Instance;
		// members
		#endregion //Members


		public void Run(String Attachment2SourceFilename, string obj_attachment2TargetFilename)
		{
			// open source streams
			using (Altova.IO.Input Attachment2Source = new Altova.IO.FileInput(Attachment2SourceFilename))
			// open target stream
			using (Altova.IO.Output obj_attachment2Target = new Altova.IO.FileOutput(obj_attachment2TargetFilename))
			{
				// run
				Run(Attachment2Source, obj_attachment2Target);
			}
		}

		public void Run(Altova.IO.Input Attachment2Source, Altova.IO.Output obj_attachment2Target)
		{
			try
			{
				// Open the source(s)
			WriteTrace("Loading " + Attachment2Source.Filename + "...\n");
			XmlDocument Attachment2DocSourceObject = XmlTreeOperations.LoadDocument(Attachment2Source);


			m_Attachment2Instance = Attachment2DocSourceObject;
			if (runDoesCloseAll)
				Attachment2Source.Close();
				// Create the target
				XmlDocument obj_attachment2Doc = (obj_attachment2Target.Type == Altova.IO.Output.OutputType.XmlDocument) ? obj_attachment2Target.Document : new XmlDocument();
				// create processing instruction etc...

				// Execute mapping

			main mapping = new main( 
				new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_Attachment2Instance, Attachment2Source.Filename));

			Altova.Mapforce.MFDomWriter.Write(mapping, obj_attachment2Doc);

				// Close the target
			XmlTreeOperations.SaveDocument(
				obj_attachment2Doc,
				obj_attachment2Target,
				"UTF-8",
				false,
				false,
				true,
				false,
				"\r\n"
			);


			}
			finally
			{
				// Close the Source Library
				if (runDoesCloseAll)
				{
					Attachment2Source.Close();
					obj_attachment2Target.Close();
				}

			}
		}
		class main : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Attachment_Instance;

			public main(
				Altova.Mapforce.IMFNode var1_Attachment_Instance
			)
			{
				this.var1_Attachment_Instance = var1_Attachment_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				private System.Collections.IEnumerable var2_Attachment;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 0;
							var2_Attachment = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Attachment", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var1_Attachment_Instance));
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("attachments", "http://www.witsml.org/schemas/1series"), (new seq1_join(var2_Attachment)));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq1_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_Attachment;

			public seq1_join(
				System.Collections.IEnumerable var1_Attachment
			)
			{
				this.var1_Attachment = var1_Attachment;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq1_join closure;
				private IEnumerator var2_Attachment;
				private IEnumerator var3_Aliases;
				private IEnumerator var4_Attachment;
				private System.Collections.IEnumerable var5_SubObjectReference;
				private Altova.Mapforce.IMFNode var6_Citation;
				private Altova.Mapforce.IMFNode var7_Wellbore;
				public Enumerator(seq1_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							current = Altova.Functions.Core.CreateNamespace("abs", "http://www.energistics.org/schemas/abstract");
							pos++;
							return true;
						case 2:
							state = 3;
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("xsi:schemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), Altova.Functions.Core.Box("http://www.witsml.org/schemas/1series http://w3.energistics.org/schema/WITSML_v1.4.1.1_Data_Schema/witsml_v1.4.1.1_data/xsd_schemas/obj_attachment.xsd"));
							pos++;
							return true;
						case 3:
							state = 4;
							var2_Attachment = (closure.var1_Attachment).GetEnumerator();
							goto case 4;
						case 4:
							state = 6;
							if (!var2_Attachment.MoveNext()) { state = 5; goto case 5; }
							var3_Aliases = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Aliases", "http://www.energistics.org/energyml/data/commonv2"), (Altova.Mapforce.IMFNode)(var2_Attachment.Current))).GetEnumerator();
							goto case 6;
						case 5:
							state = 9;
							Altova.Mapforce.MFEnumerator.Dispose(var2_Attachment); var2_Attachment = null;
							var4_Attachment = (closure.var1_Attachment).GetEnumerator();
							goto case 9;
						case 6:
							state = 6;
							if (!var3_Aliases.MoveNext()) { state = 7; goto case 7; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("version", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("authority", ""), (Altova.Mapforce.IMFNode)(var3_Aliases.Current))))));
							pos++;
							return true;
						case 7:
							state = 4;
							Altova.Mapforce.MFEnumerator.Dispose(var3_Aliases); var3_Aliases = null;
							goto case 4;
						case 9:
							state = 9;
							if (!var4_Attachment.MoveNext()) { state = 10; goto case 10; }
							var5_SubObjectReference = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("SubObjectReference", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var4_Attachment.Current)));
							var6_Citation = ((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Citation", "http://www.energistics.org/energyml/data/commonv2"), (Altova.Mapforce.IMFNode)(var4_Attachment.Current))));
							var7_Wellbore = ((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Wellbore", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var4_Attachment.Current))));
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("attachment", "http://www.witsml.org/schemas/1series"), (new seq2_join(var7_Wellbore, var5_SubObjectReference, (Altova.Mapforce.IMFNode)(var4_Attachment.Current), var6_Citation)));
							pos++;
							return true;
						case 10:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var4_Attachment); var4_Attachment = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_Aliases); var3_Aliases = null;
					Altova.Mapforce.MFEnumerator.Dispose(var2_Attachment); var2_Attachment = null;
					Altova.Mapforce.MFEnumerator.Dispose(var4_Attachment); var4_Attachment = null;
				}
			}
		}
		class seq2_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Wellbore;
			private readonly System.Collections.IEnumerable var2_SubObjectReference;
			private readonly Altova.Mapforce.IMFNode var3_cur;
			private readonly Altova.Mapforce.IMFNode var4_Citation;

			public seq2_join(
				Altova.Mapforce.IMFNode var1_Wellbore,
				System.Collections.IEnumerable var2_SubObjectReference,
				Altova.Mapforce.IMFNode var3_cur,
				Altova.Mapforce.IMFNode var4_Citation
			)
			{
				this.var1_Wellbore = var1_Wellbore;
				this.var2_SubObjectReference = var2_SubObjectReference;
				this.var3_cur = var3_cur;
				this.var4_Citation = var4_Citation;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq2_join closure;
				private IEnumerator var5_UuidAuthority;
				private IEnumerator var6_SubObjectReference;
				private IEnumerator var7_Md;
				private IEnumerator var8_MdBit;
				private IEnumerator var9_Param;
				private IEnumerator var10_FileName;
				private IEnumerator var11_FileType;
				private IEnumerator var12_CustomData;
				public Enumerator(seq2_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var5_UuidAuthority = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("UuidAuthority", "http://www.energistics.org/energyml/data/commonv2"), closure.var1_Wellbore)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var5_UuidAuthority.MoveNext()) { state = 3; goto case 3; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("uidWellbore", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var5_UuidAuthority.Current))));
							pos++;
							return true;
						case 3:
							state = 5;
							Altova.Mapforce.MFEnumerator.Dispose(var5_UuidAuthority); var5_UuidAuthority = null;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("nameWellbore", "http://www.witsml.org/schemas/1series"), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Title", "http://www.energistics.org/energyml/data/commonv2"), closure.var1_Wellbore)))));
							pos++;
							return true;
						case 5:
							state = 6;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("name", "http://www.witsml.org/schemas/1series"), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Title", "http://www.energistics.org/energyml/data/commonv2"), closure.var4_Citation)))));
							pos++;
							return true;
						case 6:
							state = 7;
							var6_SubObjectReference = (closure.var2_SubObjectReference).GetEnumerator();
							goto case 7;
						case 7:
							state = 7;
							if (!var6_SubObjectReference.MoveNext()) { state = 8; goto case 8; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("subObjectReference", "http://www.witsml.org/schemas/1series"), (new seq3_join(closure.var2_SubObjectReference, (Altova.Mapforce.IMFNode)(var6_SubObjectReference.Current))));
							pos++;
							return true;
						case 8:
							state = 10;
							Altova.Mapforce.MFEnumerator.Dispose(var6_SubObjectReference); var6_SubObjectReference = null;
							var7_Md = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Md", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var3_cur)).GetEnumerator();
							goto case 10;
						case 10:
							state = 10;
							if (!var7_Md.MoveNext()) { state = 11; goto case 11; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("md", "http://www.witsml.org/schemas/1series"), (new seq6_seq_((Altova.Mapforce.IMFNode)(var7_Md.Current))));
							pos++;
							return true;
						case 11:
							state = 13;
							Altova.Mapforce.MFEnumerator.Dispose(var7_Md); var7_Md = null;
							var8_MdBit = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MdBit", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var3_cur)).GetEnumerator();
							goto case 13;
						case 13:
							state = 13;
							if (!var8_MdBit.MoveNext()) { state = 14; goto case 14; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("mdBit", "http://www.witsml.org/schemas/1series"), tbf.tbf1_measuredDepthCoord.Eval((Altova.Mapforce.IMFNode)(var8_MdBit.Current)));
							pos++;
							return true;
						case 14:
							state = 16;
							Altova.Mapforce.MFEnumerator.Dispose(var8_MdBit); var8_MdBit = null;
							var9_Param = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Param", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var3_cur)).GetEnumerator();
							goto case 16;
						case 16:
							state = 16;
							if (!var9_Param.MoveNext()) { state = 17; goto case 17; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("param", "http://www.witsml.org/schemas/1series"), tbf.tbf2_indexedObject.Eval((Altova.Mapforce.IMFNode)(var9_Param.Current)));
							pos++;
							return true;
						case 17:
							state = 19;
							Altova.Mapforce.MFEnumerator.Dispose(var9_Param); var9_Param = null;
							var10_FileName = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("FileName", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var3_cur)).GetEnumerator();
							goto case 19;
						case 19:
							state = 19;
							if (!var10_FileName.MoveNext()) { state = 20; goto case 20; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("fileName", "http://www.witsml.org/schemas/1series"), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var10_FileName.Current))));
							pos++;
							return true;
						case 20:
							state = 22;
							Altova.Mapforce.MFEnumerator.Dispose(var10_FileName); var10_FileName = null;
							var11_FileType = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("FileType", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var3_cur)).GetEnumerator();
							goto case 22;
						case 22:
							state = 22;
							if (!var11_FileType.MoveNext()) { state = 23; goto case 23; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("fileType", "http://www.witsml.org/schemas/1series"), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var11_FileType.Current))));
							pos++;
							return true;
						case 23:
							state = 25;
							Altova.Mapforce.MFEnumerator.Dispose(var11_FileType); var11_FileType = null;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("content", "http://www.witsml.org/schemas/1series"), Altova.Functions.Core.Box(Altova.CoreTypes.BinaryToBase64String(Altova.CoreTypes.ParseBase64Binary(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Content", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var3_cur)))))));
							pos++;
							return true;
						case 25:
							state = 26;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("commonData", "http://www.witsml.org/schemas/1series"), (new seq7_join(closure.var4_Citation)));
							pos++;
							return true;
						case 26:
							state = 27;
							var12_CustomData = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CustomData", "http://www.energistics.org/energyml/data/commonv2"), closure.var3_cur)).GetEnumerator();
							goto case 27;
						case 27:
							state = 27;
							if (!var12_CustomData.MoveNext()) { state = 28; goto case 28; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("customData", "http://www.witsml.org/schemas/1series"), tbf.tbf3_cs_customData.Eval((Altova.Mapforce.IMFNode)(var12_CustomData.Current)));
							pos++;
							return true;
						case 28:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var12_CustomData); var12_CustomData = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var5_UuidAuthority); var5_UuidAuthority = null;
					Altova.Mapforce.MFEnumerator.Dispose(var6_SubObjectReference); var6_SubObjectReference = null;
					Altova.Mapforce.MFEnumerator.Dispose(var7_Md); var7_Md = null;
					Altova.Mapforce.MFEnumerator.Dispose(var8_MdBit); var8_MdBit = null;
					Altova.Mapforce.MFEnumerator.Dispose(var9_Param); var9_Param = null;
					Altova.Mapforce.MFEnumerator.Dispose(var10_FileName); var10_FileName = null;
					Altova.Mapforce.MFEnumerator.Dispose(var11_FileType); var11_FileType = null;
					Altova.Mapforce.MFEnumerator.Dispose(var12_CustomData); var12_CustomData = null;
				}
			}
		}
		class seq3_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_SubObjectReference;
			private readonly Altova.Mapforce.IMFNode var2_cur;

			public seq3_join(
				System.Collections.IEnumerable var1_SubObjectReference,
				Altova.Mapforce.IMFNode var2_cur
			)
			{
				this.var1_SubObjectReference = var1_SubObjectReference;
				this.var2_cur = var2_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq3_join closure;
				private IEnumerator var3_filter;
				public Enumerator(seq3_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_filter = (closure.var1_SubObjectReference).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_filter.MoveNext()) { state = 3; goto case 3; }
							if (!((bool)Altova.Functions.Core.First((new seq5_CoreAny((new seq4_map((Altova.Mapforce.IMFNode)(var3_filter.Current)))))))) { state = 2; goto case 2;  }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("object", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var3_filter.Current))));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_filter); var3_filter = null;
							current = Altova.CoreTypes.NodeToString(closure.var2_cur);
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_filter); var3_filter = null;
				}
			}
		}
		class seq4_map : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq4_map(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq4_map closure;
				private IEnumerator var2_type;
				public Enumerator(seq4_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_type = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("type", "http://www.w3.org/2001/XMLSchema-instance"), closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_type.MoveNext()) { state = 3; goto case 3; }
							current = Altova.Functions.Core.Equal(Altova.CoreTypes.NodeToQName((Altova.Mapforce.IMFNode)(var2_type.Current)), Altova.Functions.Lang.StringAsQName("{http://www.energistics.org/energyml/data/commonv2}AuthorityQualifiedName"));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_type); var2_type = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_type); var2_type = null;
				}
			}
		}
		class seq5_CoreAny : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_sequence;

			public seq5_CoreAny(
				System.Collections.IEnumerable var1_sequence
			)
			{
				this.var1_sequence = var1_sequence;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq5_CoreAny closure;
				private IEnumerator var2_enum;
				public Enumerator(seq5_CoreAny closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_enum = (closure.var1_sequence).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_enum.MoveNext()) { state = 3; goto case 3; }
							if (!((bool)(var2_enum.Current))) { state = 2; goto case 2;  }
							current = Altova.CoreTypes.ParseBoolean("true");
							pos++;
							return true;
						case 3:
							state = 4;
							current = Altova.CoreTypes.ParseBoolean("false");
							pos++;
							return true;
						case 4:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_enum); var2_enum = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_enum); var2_enum = null;
				}
			}
		}
		class seq6_seq_ : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_cur;

			public seq6_seq_(
				Altova.Mapforce.IMFNode var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq6_seq_ closure;
				public Enumerator(seq6_seq_ closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("uom", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("uom", ""), closure.var1_cur)))));
							pos++;
							return true;
						case 2:
							state = 3;
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("datum", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("datum", ""), closure.var1_cur)))));
							pos++;
							return true;
						case 3:
							state = 0;
							current = Altova.CoreTypes.DoubleToString(Altova.CoreTypes.ParseDouble(Altova.CoreTypes.NodeToString(closure.var1_cur)));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq7_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Citation;

			public seq7_join(
				Altova.Mapforce.IMFNode var1_Citation
			)
			{
				this.var1_Citation = var1_Citation;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq7_join closure;
				private IEnumerator var2_LastUpdate;
				public Enumerator(seq7_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("dTimCreation", "http://www.witsml.org/schemas/1series"), Altova.Functions.Core.Box(Altova.CoreTypes.DateTimeToString(Altova.CoreTypes.ParseDateTime(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Creation", "http://www.energistics.org/energyml/data/commonv2"), closure.var1_Citation)))))));
							pos++;
							return true;
						case 2:
							state = 3;
							var2_LastUpdate = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("LastUpdate", "http://www.energistics.org/energyml/data/commonv2"), closure.var1_Citation)).GetEnumerator();
							goto case 3;
						case 3:
							state = 3;
							if (!var2_LastUpdate.MoveNext()) { state = 4; goto case 4; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("dTimLastChange", "http://www.witsml.org/schemas/1series"), Altova.Functions.Core.Box(Altova.CoreTypes.DateTimeToString(Altova.CoreTypes.ParseDateTime(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_LastUpdate.Current))))));
							pos++;
							return true;
						case 4:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_LastUpdate); var2_LastUpdate = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_LastUpdate); var2_LastUpdate = null;
				}
			}
		}
		class Outer : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Attachment_Instance;

			public Outer(
				Altova.Mapforce.IMFNode var1_Attachment_Instance
			)
			{
				this.var1_Attachment_Instance = var1_Attachment_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly Outer closure;
				private IEnumerator var2_Attachment;
				public Enumerator(Outer closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_Attachment = ((new main(closure.var1_Attachment_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_Attachment.MoveNext()) { state = 3; goto case 3; }
							current = var2_Attachment.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_Attachment); var2_Attachment = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_Attachment); var2_Attachment = null;
				}
			}
		}

	}
}
