////////////////////////////////////////////////////////////////////////
//
// user/select_exists.cs
//
// This file was generated by MapForce 2023sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;


namespace user
{

	public class select_exists : Altova.TraceProvider
	{


		#region Members		
		// instances
		// members
		protected object m_resultTargetParameter;
		#endregion //Members

		class main : IEnumerable
		{
			private readonly Altova.Functions.RuntimeContext var1_context;
			private readonly string var2_inputNode;
			private readonly System.Collections.IEnumerable var3_lastNode;

			public main(
				Altova.Functions.RuntimeContext var1_context,
				string var2_inputNode,
				System.Collections.IEnumerable var3_lastNode
			)
			{
				this.var1_context = var1_context;
				this.var2_inputNode = var2_inputNode;
				this.var3_lastNode = var3_lastNode;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 0;
							current = closure.var2_inputNode;
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}


		public static IEnumerable Create(
			Altova.Functions.RuntimeContext var1_context,
			string var2_inputNode,
			System.Collections.IEnumerable var3_lastNode
		)
		{
			return new main(
				var1_context,
				var2_inputNode,
				var3_lastNode
			);
		}


		public static System.Collections.IEnumerable Eval(
			Altova.Functions.RuntimeContext var1_context,
			string var2_inputNode,
			System.Collections.IEnumerable var3_lastNode
		)
		{
			return Create(var1_context,var2_inputNode,var3_lastNode);
		}

	}
}
