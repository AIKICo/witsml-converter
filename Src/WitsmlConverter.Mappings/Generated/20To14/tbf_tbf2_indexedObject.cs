////////////////////////////////////////////////////////////////////////
//
// tbf/tbf2_indexedObject.cs
//
// This file was generated by MapForce 2023sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;


namespace tbf
{

	public class tbf2_indexedObject : Altova.TraceProvider
	{


		class main : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_input;

			public main(
				Altova.Mapforce.IMFNode var1_input
			)
			{
				this.var1_input = var1_input;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				private IEnumerator var2_index;
				private IEnumerator var3_name;
				private IEnumerator var4_uom;
				private IEnumerator var5_description;
				private IEnumerator var6_uid;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 3;
							var2_index = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("index", ""), closure.var1_input)).GetEnumerator();
							goto case 3;
						case 3:
							state = 3;
							if (!var2_index.MoveNext()) { state = 4; goto case 4; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("index", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_index.Current))));
							pos++;
							return true;
						case 4:
							state = 6;
							Altova.Mapforce.MFEnumerator.Dispose(var2_index); var2_index = null;
							var3_name = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("name", ""), closure.var1_input)).GetEnumerator();
							goto case 6;
						case 6:
							state = 6;
							if (!var3_name.MoveNext()) { state = 7; goto case 7; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("name", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var3_name.Current))));
							pos++;
							return true;
						case 7:
							state = 9;
							Altova.Mapforce.MFEnumerator.Dispose(var3_name); var3_name = null;
							var4_uom = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("uom", ""), closure.var1_input)).GetEnumerator();
							goto case 9;
						case 9:
							state = 9;
							if (!var4_uom.MoveNext()) { state = 10; goto case 10; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("uom", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var4_uom.Current))));
							pos++;
							return true;
						case 10:
							state = 12;
							Altova.Mapforce.MFEnumerator.Dispose(var4_uom); var4_uom = null;
							var5_description = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("description", ""), closure.var1_input)).GetEnumerator();
							goto case 12;
						case 12:
							state = 12;
							if (!var5_description.MoveNext()) { state = 13; goto case 13; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("description", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var5_description.Current))));
							pos++;
							return true;
						case 13:
							state = 15;
							Altova.Mapforce.MFEnumerator.Dispose(var5_description); var5_description = null;
							var6_uid = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("uid", ""), closure.var1_input)).GetEnumerator();
							goto case 15;
						case 15:
							state = 15;
							if (!var6_uid.MoveNext()) { state = 16; goto case 16; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("uid", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var6_uid.Current))));
							pos++;
							return true;
						case 16:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var6_uid); var6_uid = null;
							current = Altova.CoreTypes.NodeToString(closure.var1_input);
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_index); var2_index = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_name); var3_name = null;
					Altova.Mapforce.MFEnumerator.Dispose(var4_uom); var4_uom = null;
					Altova.Mapforce.MFEnumerator.Dispose(var5_description); var5_description = null;
					Altova.Mapforce.MFEnumerator.Dispose(var6_uid); var6_uid = null;
				}
			}
		}


		public static IEnumerable Create(
			Altova.Mapforce.IMFNode var1_input
		)
		{
			return new main(
				var1_input
			);
		}


		public static System.Collections.IEnumerable Eval(
			Altova.Mapforce.IMFNode var1_input
		)
		{
			return Create(var1_input);
		}

	}
}
