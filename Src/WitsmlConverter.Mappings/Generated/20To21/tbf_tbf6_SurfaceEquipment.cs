////////////////////////////////////////////////////////////////////////
//
// tbf/tbf6_SurfaceEquipment.cs
//
// This file was generated by MapForce 2023sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;


namespace tbf
{

	public class tbf6_SurfaceEquipment : Altova.TraceProvider
	{


		class main : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_input;

			public main(
				Altova.Mapforce.IMFNode var1_input
			)
			{
				this.var1_input = var1_input;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				private IEnumerator var2_select_children;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 3;
							var2_select_children = (Altova.Functions.Core.SelectChildren(closure.var1_input)).GetEnumerator();
							goto case 3;
						case 3:
							state = 8;
							if (!var2_select_children.MoveNext()) { state = 4; goto case 4; }
							if (!((((Altova.Mapforce.IMFNode)(var2_select_children.Current)).NodeKind) == (Altova.Mapforce.MFNodeKind.Element))) { state = 5; goto case 5;  }
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("Description", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 8; goto case 8;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 4:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_select_children); var2_select_children = null;
							return false;
						case 5:
							state = 3;
							if (!(((((Altova.Mapforce.IMFNode)(var2_select_children.Current)).NodeKind) & (Altova.Mapforce.MFNodeKind.Text)) != (0))) { state = 118; goto case 118;  }
							goto case 3;
						case 8:
							state = 11;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("PresRating", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 11; goto case 11;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq1_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 11:
							state = 14;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("TypeSurfEquip", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 14; goto case 14;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 14:
							state = 17;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UsePumpDischarge", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 17; goto case 17;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 17:
							state = 20;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UseStandpipe", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 20; goto case 20;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 20:
							state = 23;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UseHose", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 23; goto case 23;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 23:
							state = 26;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UseSwivel", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 26; goto case 26;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 26:
							state = 29;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UseKelly", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 29; goto case 29;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 29:
							state = 32;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UseTopStack", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 32; goto case 32;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 32:
							state = 35;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UseInjStack", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 35; goto case 35;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 35:
							state = 38;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UseSurfaceIron", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 38; goto case 38;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 38:
							state = 41;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("IdStandpipe", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 41; goto case 41;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq2_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 41:
							state = 44;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenStandpipe", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 44; goto case 44;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq3_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 44:
							state = 47;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("IdHose", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 47; goto case 47;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq4_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 47:
							state = 50;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenHose", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 50; goto case 50;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq5_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 50:
							state = 53;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("IdSwivel", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 53; goto case 53;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq6_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 53:
							state = 56;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenSwivel", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 56; goto case 56;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq7_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 56:
							state = 59;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("IdKelly", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 59; goto case 59;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq8_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 59:
							state = 62;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenKelly", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 62; goto case 62;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq9_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 62:
							state = 65;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("IdSurfaceIron", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 65; goto case 65;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq10_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 65:
							state = 68;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenSurfaceIron", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 68; goto case 68;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq11_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 68:
							state = 71;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("HtSurfaceIron", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 71; goto case 71;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq12_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 71:
							state = 74;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("IdDischargeLine", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 74; goto case 74;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq13_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 74:
							state = 77;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenDischargeLine", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 77; goto case 77;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq14_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 77:
							state = 80;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("CtWrapType", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 80; goto case 80;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 80:
							state = 83;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("OdReel", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 83; goto case 83;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq15_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 83:
							state = 86;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("OdCore", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 86; goto case 86;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq16_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 86:
							state = 89;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("WidReelWrap", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 89; goto case 89;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq17_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 89:
							state = 92;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenReel", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 92; goto case 92;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq18_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 92:
							state = 95;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("InjStkUp", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 95; goto case 95;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 95:
							state = 98;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("HtInjStk", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 98; goto case 98;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq19_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 98:
							state = 101;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("UmbInside", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 101; goto case 101;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 101:
							state = 104;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("OdUmbilical", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 104; goto case 104;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq20_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 104:
							state = 107;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("LenUmbilical", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 107; goto case 107;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq21_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 107:
							state = 110;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("IdTopStk", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 110; goto case 110;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq22_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 110:
							state = 113;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("HtTopStk", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 113; goto case 113;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq23_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 113:
							state = 3;
							if (!(Altova.Functions.Core.NodeNameEqual(Altova.Functions.Core.CreateQName("HtFlange", "http://www.energistics.org/energyml/data/witsmlv2"), (Altova.Mapforce.IMFNode)(var2_select_children.Current)))) { state = 3; goto case 3;  }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.NodeName((Altova.Mapforce.IMFNode)(var2_select_children.Current)), (new seq24_join((Altova.Mapforce.IMFNode)(var2_select_children.Current))));
							pos++;
							return true;
						case 118:
							state = 3;
							current = var2_select_children.Current;
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_select_children); var2_select_children = null;
				}
			}
		}
		class seq1_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq1_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq1_join closure;
				private IEnumerator var2_tbf3_PressureMeasure;
				public Enumerator(seq1_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf3_PressureMeasure = (tbf.tbf3_PressureMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf3_PressureMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf3_PressureMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf3_PressureMeasure); var2_tbf3_PressureMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf3_PressureMeasure); var2_tbf3_PressureMeasure = null;
				}
			}
		}
		class seq2_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq2_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq2_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq2_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq3_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq3_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq3_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq3_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq4_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq4_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq4_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq4_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq5_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq5_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq5_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq5_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq6_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq6_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq6_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq6_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq7_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq7_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq7_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq7_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq8_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq8_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq8_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq8_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq9_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq9_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq9_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq9_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq10_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq10_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq10_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq10_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq11_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq11_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq11_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq11_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq12_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq12_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq12_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq12_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq13_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq13_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq13_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq13_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq14_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq14_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq14_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq14_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq15_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq15_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq15_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq15_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq16_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq16_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq16_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq16_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq17_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq17_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq17_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq17_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq18_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq18_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq18_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq18_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq19_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq19_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq19_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq19_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq20_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq20_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq20_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq20_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq21_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq21_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq21_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq21_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq22_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq22_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq22_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq22_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq23_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq23_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq23_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq23_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}
		class seq24_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_current;

			public seq24_join(
				Altova.Mapforce.IMFNode var1_current
			)
			{
				this.var1_current = var1_current;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq24_join closure;
				private IEnumerator var2_tbf8_LengthMeasure;
				public Enumerator(seq24_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_tbf8_LengthMeasure = (tbf.tbf8_LengthMeasure.Eval(closure.var1_current)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_tbf8_LengthMeasure.MoveNext()) { state = 3; goto case 3; }
							current = var2_tbf8_LengthMeasure.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_tbf8_LengthMeasure); var2_tbf8_LengthMeasure = null;
				}
			}
		}


		public static IEnumerable Create(
			Altova.Mapforce.IMFNode var1_input
		)
		{
			return new main(
				var1_input
			);
		}


		public static System.Collections.IEnumerable Eval(
			Altova.Mapforce.IMFNode var1_input
		)
		{
			return Create(var1_input);
		}

	}
}
