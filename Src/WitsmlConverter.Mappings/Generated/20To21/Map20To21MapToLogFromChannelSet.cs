////////////////////////////////////////////////////////////////////////
//
// Map20To21MapToLogFromChannelSet.cs
//
// This file was generated by MapForce 2023sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;



namespace Map20To21
{

	public class Map20To21MapToLogFromChannelSet : Altova.TraceProvider
	{
		private bool runDoesCloseAll = true;
		public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; }	}


		#region Members		
		// instances
		protected XmlNode m_ChannelSet2Instance;
		// members
		#endregion //Members


		public void Run(String ChannelSet2SourceFilename, string LogFromChannelSetTargetFilename)
		{
			// open source streams
			using (Altova.IO.Input ChannelSet2Source = new Altova.IO.FileInput(ChannelSet2SourceFilename))
			// open target stream
			using (Altova.IO.Output LogFromChannelSetTarget = new Altova.IO.FileOutput(LogFromChannelSetTargetFilename))
			{
				// run
				Run(ChannelSet2Source, LogFromChannelSetTarget);
			}
		}

		public void Run(Altova.IO.Input ChannelSet2Source, Altova.IO.Output LogFromChannelSetTarget)
		{
			try
			{
				// Open the source(s)
			WriteTrace("Loading " + ChannelSet2Source.Filename + "...\n");
			XmlDocument ChannelSet2DocSourceObject = XmlTreeOperations.LoadDocument(ChannelSet2Source);


			m_ChannelSet2Instance = ChannelSet2DocSourceObject;
			if (runDoesCloseAll)
				ChannelSet2Source.Close();
				// Create the target
				XmlDocument LogFromChannelSetDoc = (LogFromChannelSetTarget.Type == Altova.IO.Output.OutputType.XmlDocument) ? LogFromChannelSetTarget.Document : new XmlDocument();
				// create processing instruction etc...

				// Execute mapping

			main mapping = new main( 
				new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_ChannelSet2Instance, ChannelSet2Source.Filename));

			Altova.Mapforce.MFDomWriter.Write(mapping, LogFromChannelSetDoc);

				// Close the target
			XmlTreeOperations.SaveDocument(
				LogFromChannelSetDoc,
				LogFromChannelSetTarget,
				"UTF-8",
				false,
				false,
				true,
				false,
				"\r\n"
			);


			}
			finally
			{
				// Close the Source Library
				if (runDoesCloseAll)
				{
					ChannelSet2Source.Close();
					LogFromChannelSetTarget.Close();
				}

			}
		}
		class main : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_ChannelSet_Instance;

			public main(
				Altova.Mapforce.IMFNode var1_ChannelSet_Instance
			)
			{
				this.var1_ChannelSet_Instance = var1_ChannelSet_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				private System.Collections.IEnumerable var2_box;
				private System.Collections.IEnumerable var3_ChannelSet;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 0;
							var2_box = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.Box("x"));
							var3_ChannelSet = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ChannelSet", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var1_ChannelSet_Instance));
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("Log", "http://www.energistics.org/energyml/data/witsmlv2"), (new seq1_join(var2_box, var3_ChannelSet)));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq1_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_box;
			private readonly System.Collections.IEnumerable var2_ChannelSet;

			public seq1_join(
				System.Collections.IEnumerable var1_box,
				System.Collections.IEnumerable var2_ChannelSet
			)
			{
				this.var1_box = var1_box;
				this.var2_ChannelSet = var2_ChannelSet;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq1_join closure;
				private IEnumerator var3_ChannelSet;
				private IEnumerator var4_objectVersion;
				private IEnumerator var5_ChannelSet;
				private IEnumerator var6_schemaVersion;
				private IEnumerator var7_ChannelSet;
				private IEnumerator var8_uuid;
				private IEnumerator var9_ChannelSet;
				private IEnumerator var10_existenceKind;
				private IEnumerator var11_ChannelSet;
				private IEnumerator var12_Citation;
				private IEnumerator var13_ChannelSet;
				public Enumerator(seq1_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							current = Altova.Functions.Core.CreateNamespace("eml", "http://www.energistics.org/energyml/data/commonv2");
							pos++;
							return true;
						case 2:
							state = 3;
							current = Altova.Functions.Core.CreateNamespace("gco", "http://www.isotc211.org/2005/gco");
							pos++;
							return true;
						case 3:
							state = 4;
							current = Altova.Functions.Core.CreateNamespace("gmd", "http://www.isotc211.org/2005/gmd");
							pos++;
							return true;
						case 4:
							state = 5;
							current = Altova.Functions.Core.CreateNamespace("gsr", "http://www.isotc211.org/2005/gsr");
							pos++;
							return true;
						case 5:
							state = 6;
							current = Altova.Functions.Core.CreateNamespace("gts", "http://www.isotc211.org/2005/gts");
							pos++;
							return true;
						case 6:
							state = 7;
							current = Altova.Functions.Core.CreateNamespace("gml", "http://www.opengis.net/gml/3.2");
							pos++;
							return true;
						case 7:
							state = 8;
							current = Altova.Functions.Core.CreateNamespace("xlink", "http://www.w3.org/1999/xlink");
							pos++;
							return true;
						case 8:
							state = 9;
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("xsi:schemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), Altova.Functions.Core.Box("http://www.energistics.org/energyml/data/witsmlv2 file:///D:/Repos/witsml-converter/Mappings/Energistics/energyml/data/witsml/v2.0/xsd_schemas/Log.xsd"));
							pos++;
							return true;
						case 9:
							state = 10;
							var3_ChannelSet = (closure.var2_ChannelSet).GetEnumerator();
							goto case 10;
						case 10:
							state = 12;
							if (!var3_ChannelSet.MoveNext()) { state = 11; goto case 11; }
							var4_objectVersion = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("objectVersion", ""), (Altova.Mapforce.IMFNode)(var3_ChannelSet.Current))).GetEnumerator();
							goto case 12;
						case 11:
							state = 15;
							Altova.Mapforce.MFEnumerator.Dispose(var3_ChannelSet); var3_ChannelSet = null;
							var5_ChannelSet = (closure.var2_ChannelSet).GetEnumerator();
							goto case 15;
						case 12:
							state = 12;
							if (!var4_objectVersion.MoveNext()) { state = 13; goto case 13; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("objectVersion", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var4_objectVersion.Current))));
							pos++;
							return true;
						case 13:
							state = 10;
							Altova.Mapforce.MFEnumerator.Dispose(var4_objectVersion); var4_objectVersion = null;
							goto case 10;
						case 15:
							state = 17;
							if (!var5_ChannelSet.MoveNext()) { state = 16; goto case 16; }
							var6_schemaVersion = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("schemaVersion", ""), (Altova.Mapforce.IMFNode)(var5_ChannelSet.Current))).GetEnumerator();
							goto case 17;
						case 16:
							state = 20;
							Altova.Mapforce.MFEnumerator.Dispose(var5_ChannelSet); var5_ChannelSet = null;
							var7_ChannelSet = (closure.var2_ChannelSet).GetEnumerator();
							goto case 20;
						case 17:
							state = 17;
							if (!var6_schemaVersion.MoveNext()) { state = 18; goto case 18; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("schemaVersion", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var6_schemaVersion.Current))));
							pos++;
							return true;
						case 18:
							state = 15;
							Altova.Mapforce.MFEnumerator.Dispose(var6_schemaVersion); var6_schemaVersion = null;
							goto case 15;
						case 20:
							state = 22;
							if (!var7_ChannelSet.MoveNext()) { state = 21; goto case 21; }
							var8_uuid = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("uuid", ""), (Altova.Mapforce.IMFNode)(var7_ChannelSet.Current))).GetEnumerator();
							goto case 22;
						case 21:
							state = 25;
							Altova.Mapforce.MFEnumerator.Dispose(var7_ChannelSet); var7_ChannelSet = null;
							var9_ChannelSet = (closure.var2_ChannelSet).GetEnumerator();
							goto case 25;
						case 22:
							state = 22;
							if (!var8_uuid.MoveNext()) { state = 23; goto case 23; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("uuid", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var8_uuid.Current))));
							pos++;
							return true;
						case 23:
							state = 20;
							Altova.Mapforce.MFEnumerator.Dispose(var8_uuid); var8_uuid = null;
							goto case 20;
						case 25:
							state = 27;
							if (!var9_ChannelSet.MoveNext()) { state = 26; goto case 26; }
							var10_existenceKind = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("existenceKind", ""), (Altova.Mapforce.IMFNode)(var9_ChannelSet.Current))).GetEnumerator();
							goto case 27;
						case 26:
							state = 30;
							Altova.Mapforce.MFEnumerator.Dispose(var9_ChannelSet); var9_ChannelSet = null;
							var11_ChannelSet = (closure.var2_ChannelSet).GetEnumerator();
							goto case 30;
						case 27:
							state = 27;
							if (!var10_existenceKind.MoveNext()) { state = 28; goto case 28; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("existenceKind", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var10_existenceKind.Current))));
							pos++;
							return true;
						case 28:
							state = 25;
							Altova.Mapforce.MFEnumerator.Dispose(var10_existenceKind); var10_existenceKind = null;
							goto case 25;
						case 30:
							state = 32;
							if (!var11_ChannelSet.MoveNext()) { state = 31; goto case 31; }
							var12_Citation = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Citation", "http://www.energistics.org/energyml/data/commonv2"), (Altova.Mapforce.IMFNode)(var11_ChannelSet.Current))).GetEnumerator();
							goto case 32;
						case 31:
							state = 35;
							Altova.Mapforce.MFEnumerator.Dispose(var11_ChannelSet); var11_ChannelSet = null;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("Wellbore", "http://www.energistics.org/energyml/data/witsmlv2"), (new seq3_seq_(closure.var1_box)));
							pos++;
							return true;
						case 32:
							state = 32;
							if (!var12_Citation.MoveNext()) { state = 33; goto case 33; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("eml:Citation", "http://www.energistics.org/energyml/data/commonv2"), (new seq2_join((Altova.Mapforce.IMFNode)(var12_Citation.Current))));
							pos++;
							return true;
						case 33:
							state = 30;
							Altova.Mapforce.MFEnumerator.Dispose(var12_Citation); var12_Citation = null;
							goto case 30;
						case 35:
							state = 36;
							var13_ChannelSet = (closure.var2_ChannelSet).GetEnumerator();
							goto case 36;
						case 36:
							state = 36;
							if (!var13_ChannelSet.MoveNext()) { state = 37; goto case 37; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("ChannelSet", "http://www.energistics.org/energyml/data/witsmlv2"), (new seq2_join((Altova.Mapforce.IMFNode)(var13_ChannelSet.Current))));
							pos++;
							return true;
						case 37:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var13_ChannelSet); var13_ChannelSet = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_objectVersion); var4_objectVersion = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_ChannelSet); var3_ChannelSet = null;
					Altova.Mapforce.MFEnumerator.Dispose(var6_schemaVersion); var6_schemaVersion = null;
					Altova.Mapforce.MFEnumerator.Dispose(var5_ChannelSet); var5_ChannelSet = null;
					Altova.Mapforce.MFEnumerator.Dispose(var8_uuid); var8_uuid = null;
					Altova.Mapforce.MFEnumerator.Dispose(var7_ChannelSet); var7_ChannelSet = null;
					Altova.Mapforce.MFEnumerator.Dispose(var10_existenceKind); var10_existenceKind = null;
					Altova.Mapforce.MFEnumerator.Dispose(var9_ChannelSet); var9_ChannelSet = null;
					Altova.Mapforce.MFEnumerator.Dispose(var12_Citation); var12_Citation = null;
					Altova.Mapforce.MFEnumerator.Dispose(var11_ChannelSet); var11_ChannelSet = null;
					Altova.Mapforce.MFEnumerator.Dispose(var13_ChannelSet); var13_ChannelSet = null;
				}
			}
		}
		class seq2_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_cur;

			public seq2_join(
				Altova.Mapforce.IMFNode var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq2_join closure;
				private IEnumerator var2_select_attributes;
				private IEnumerator var3_select_children;
				public Enumerator(seq2_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_select_attributes = (Altova.Functions.Core.SelectAttributes(closure.var1_cur)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_select_attributes.MoveNext()) { state = 3; goto case 3; }
							current = var2_select_attributes.Current;
							pos++;
							return true;
						case 3:
							state = 5;
							Altova.Mapforce.MFEnumerator.Dispose(var2_select_attributes); var2_select_attributes = null;
							var3_select_children = (Altova.Functions.Core.SelectChildren(closure.var1_cur)).GetEnumerator();
							goto case 5;
						case 5:
							state = 5;
							if (!var3_select_children.MoveNext()) { state = 6; goto case 6; }
							current = var3_select_children.Current;
							pos++;
							return true;
						case 6:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_select_children); var3_select_children = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_select_attributes); var2_select_attributes = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_select_children); var3_select_children = null;
				}
			}
		}
		class seq3_seq_ : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_box;

			public seq3_seq_(
				System.Collections.IEnumerable var1_box
			)
			{
				this.var1_box = var1_box;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq3_seq_ closure;
				public Enumerator(seq3_seq_ closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("eml:ContentType", "http://www.energistics.org/energyml/data/commonv2"), closure.var1_box);
							pos++;
							return true;
						case 2:
							state = 3;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("eml:Title", "http://www.energistics.org/energyml/data/commonv2"), closure.var1_box);
							pos++;
							return true;
						case 3:
							state = 0;
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("eml:Uuid", "http://www.energistics.org/energyml/data/commonv2"), Altova.Functions.Core.Box("00000000-0000-0000-0000-000000000000"));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class Outer : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_ChannelSet_Instance;

			public Outer(
				Altova.Mapforce.IMFNode var1_ChannelSet_Instance
			)
			{
				this.var1_ChannelSet_Instance = var1_ChannelSet_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly Outer closure;
				private IEnumerator var2_box;
				public Enumerator(Outer closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_box = ((new main(closure.var1_ChannelSet_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_box.MoveNext()) { state = 3; goto case 3; }
							current = var2_box.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_box); var2_box = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_box); var2_box = null;
				}
			}
		}

	}
}
