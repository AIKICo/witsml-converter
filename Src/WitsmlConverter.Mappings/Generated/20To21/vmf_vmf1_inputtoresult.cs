////////////////////////////////////////////////////////////////////////
//
// vmf/vmf1_inputtoresult.cs
//
// This file was generated by MapForce 2023sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;


namespace vmf
{

	public class vmf1_inputtoresult : Altova.TraceProvider
	{


		class main : IEnumerable
		{
			private readonly string var1_input;

			public main(
				string var1_input
			)
			{
				this.var1_input = var1_input;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 0;
							current = closure.var1_input;
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}


		public static IEnumerable Create(
			string var1_input
		)
		{
			object o = hash[var1_input];
			if (o != null)
				return new Altova.Mapforce.MFSingletonSequence(o);
			else
				return new main(var1_input);
		}

		private static readonly Hashtable hash = new Hashtable();
		static vmf1_inputtoresult()
		{
			hash["vector"] = "double";
		}

		public static string Eval(
			string var1_input
		)
		{

			IEnumerator e = Create(var1_input).GetEnumerator();
			if (e.MoveNext())
			{
				string result = (string)e.Current;
				Altova.Mapforce.MFEnumerator.Dispose(e);
				return result;
			}
			Altova.Mapforce.MFEnumerator.Dispose(e);
			throw new Exception("Expected a function result.");		
		}

	}
}
