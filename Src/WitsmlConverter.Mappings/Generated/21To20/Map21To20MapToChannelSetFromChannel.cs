////////////////////////////////////////////////////////////////////////
//
// Map21To20MapToChannelSetFromChannel.cs
//
// This file was generated by MapForce 2023sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;



namespace Map21To20
{

	public class Map21To20MapToChannelSetFromChannel : Altova.TraceProvider
	{
		private bool runDoesCloseAll = true;
		public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; }	}


		#region Members		
		// instances
		protected XmlNode m_ChannelInstance;
		// members
		#endregion //Members


		public void Run(String ChannelSourceFilename, string ChannelSetFromChannelTargetFilename)
		{
			// open source streams
			using (Altova.IO.Input ChannelSource = new Altova.IO.FileInput(ChannelSourceFilename))
			// open target stream
			using (Altova.IO.Output ChannelSetFromChannelTarget = new Altova.IO.FileOutput(ChannelSetFromChannelTargetFilename))
			{
				// run
				Run(ChannelSource, ChannelSetFromChannelTarget);
			}
		}

		public void Run(Altova.IO.Input ChannelSource, Altova.IO.Output ChannelSetFromChannelTarget)
		{
			try
			{
				// Open the source(s)
			WriteTrace("Loading " + ChannelSource.Filename + "...\n");
			XmlDocument ChannelDocSourceObject = XmlTreeOperations.LoadDocument(ChannelSource);


			m_ChannelInstance = ChannelDocSourceObject;
			if (runDoesCloseAll)
				ChannelSource.Close();
				// Create the target
				XmlDocument ChannelSetFromChannelDoc = (ChannelSetFromChannelTarget.Type == Altova.IO.Output.OutputType.XmlDocument) ? ChannelSetFromChannelTarget.Document : new XmlDocument();
				// create processing instruction etc...

				// Execute mapping

			main mapping = new main( 
				new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_ChannelInstance, ChannelSource.Filename));

			Altova.Mapforce.MFDomWriter.Write(mapping, ChannelSetFromChannelDoc);

				// Close the target
			XmlTreeOperations.SaveDocument(
				ChannelSetFromChannelDoc,
				ChannelSetFromChannelTarget,
				"UTF-8",
				false,
				false,
				true,
				false,
				"\r\n"
			);


			}
			finally
			{
				// Close the Source Library
				if (runDoesCloseAll)
				{
					ChannelSource.Close();
					ChannelSetFromChannelTarget.Close();
				}

			}
		}
		class main : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Channel_Instance;

			public main(
				Altova.Mapforce.IMFNode var1_Channel_Instance
			)
			{
				this.var1_Channel_Instance = var1_Channel_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				private System.Collections.IEnumerable var2_Channel;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 0;
							var2_Channel = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Channel", "http://www.energistics.org/energyml/data/witsmlv2"), closure.var1_Channel_Instance));
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("ChannelSet", "http://www.energistics.org/energyml/data/witsmlv2"), (new seq1_join(var2_Channel)));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq1_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_Channel;

			public seq1_join(
				System.Collections.IEnumerable var1_Channel
			)
			{
				this.var1_Channel = var1_Channel;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq1_join closure;
				private IEnumerator var2_Channel;
				private IEnumerator var3_Channel;
				private IEnumerator var4_Channel;
				private IEnumerator var5_objectVersion;
				private IEnumerator var6_Channel;
				private IEnumerator var7_Channel;
				public Enumerator(seq1_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							current = Altova.Functions.Core.CreateNamespace("eml", "http://www.energistics.org/energyml/data/commonv2");
							pos++;
							return true;
						case 2:
							state = 3;
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("xsi:schemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), Altova.Functions.Core.Box("http://www.energistics.org/energyml/data/witsmlv2 file:///D:/Repos/witsmlvalidation/witsml/energyml/2.1/data/witsml/v2.1/xsd_schemas/Log.xsd"));
							pos++;
							return true;
						case 3:
							state = 4;
							var2_Channel = (closure.var1_Channel).GetEnumerator();
							goto case 4;
						case 4:
							state = 4;
							if (!var2_Channel.MoveNext()) { state = 5; goto case 5; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("uuid", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("uuid", ""), (Altova.Mapforce.IMFNode)(var2_Channel.Current))))));
							pos++;
							return true;
						case 5:
							state = 7;
							Altova.Mapforce.MFEnumerator.Dispose(var2_Channel); var2_Channel = null;
							var3_Channel = (closure.var1_Channel).GetEnumerator();
							goto case 7;
						case 7:
							state = 7;
							if (!var3_Channel.MoveNext()) { state = 8; goto case 8; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("schemaVersion", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("schemaVersion", ""), (Altova.Mapforce.IMFNode)(var3_Channel.Current))))));
							pos++;
							return true;
						case 8:
							state = 10;
							Altova.Mapforce.MFEnumerator.Dispose(var3_Channel); var3_Channel = null;
							var4_Channel = (closure.var1_Channel).GetEnumerator();
							goto case 10;
						case 10:
							state = 12;
							if (!var4_Channel.MoveNext()) { state = 11; goto case 11; }
							var5_objectVersion = (Altova.Functions.Core.FilterAttributes(Altova.Functions.Core.CreateQName("objectVersion", ""), (Altova.Mapforce.IMFNode)(var4_Channel.Current))).GetEnumerator();
							goto case 12;
						case 11:
							state = 15;
							Altova.Mapforce.MFEnumerator.Dispose(var4_Channel); var4_Channel = null;
							var6_Channel = (closure.var1_Channel).GetEnumerator();
							goto case 15;
						case 12:
							state = 12;
							if (!var5_objectVersion.MoveNext()) { state = 13; goto case 13; }
							current = Altova.Functions.Core.CreateAttribute(Altova.Functions.Core.CreateQName("objectVersion", ""), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var5_objectVersion.Current))));
							pos++;
							return true;
						case 13:
							state = 10;
							Altova.Mapforce.MFEnumerator.Dispose(var5_objectVersion); var5_objectVersion = null;
							goto case 10;
						case 15:
							state = 15;
							if (!var6_Channel.MoveNext()) { state = 16; goto case 16; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("eml:Citation", "http://www.energistics.org/energyml/data/commonv2"), (new seq2_join((Altova.Mapforce.IMFNode)(var6_Channel.Current))));
							pos++;
							return true;
						case 16:
							state = 18;
							Altova.Mapforce.MFEnumerator.Dispose(var6_Channel); var6_Channel = null;
							var7_Channel = (closure.var1_Channel).GetEnumerator();
							goto case 18;
						case 18:
							state = 18;
							if (!var7_Channel.MoveNext()) { state = 19; goto case 19; }
							current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("Channel", "http://www.energistics.org/energyml/data/witsmlv2"), (new seq3_join((Altova.Mapforce.IMFNode)(var7_Channel.Current))));
							pos++;
							return true;
						case 19:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var7_Channel); var7_Channel = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_Channel); var2_Channel = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_Channel); var3_Channel = null;
					Altova.Mapforce.MFEnumerator.Dispose(var5_objectVersion); var5_objectVersion = null;
					Altova.Mapforce.MFEnumerator.Dispose(var4_Channel); var4_Channel = null;
					Altova.Mapforce.MFEnumerator.Dispose(var6_Channel); var6_Channel = null;
					Altova.Mapforce.MFEnumerator.Dispose(var7_Channel); var7_Channel = null;
				}
			}
		}
		class seq2_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_cur;

			public seq2_join(
				Altova.Mapforce.IMFNode var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq2_join closure;
				private Altova.Mapforce.IMFNode var2_Citation;
				private IEnumerator var3_select_attributes;
				private IEnumerator var4_select_children;
				public Enumerator(seq2_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_Citation = ((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Citation", "http://www.energistics.org/energyml/data/commonv2"), closure.var1_cur)));
							var3_select_attributes = (Altova.Functions.Core.SelectAttributes(var2_Citation)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_select_attributes.MoveNext()) { state = 3; goto case 3; }
							current = var3_select_attributes.Current;
							pos++;
							return true;
						case 3:
							state = 5;
							Altova.Mapforce.MFEnumerator.Dispose(var3_select_attributes); var3_select_attributes = null;
							var4_select_children = (Altova.Functions.Core.SelectChildren(var2_Citation)).GetEnumerator();
							goto case 5;
						case 5:
							state = 5;
							if (!var4_select_children.MoveNext()) { state = 6; goto case 6; }
							current = var4_select_children.Current;
							pos++;
							return true;
						case 6:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var4_select_children); var4_select_children = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_select_attributes); var3_select_attributes = null;
					Altova.Mapforce.MFEnumerator.Dispose(var4_select_children); var4_select_children = null;
				}
			}
		}
		class seq3_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_cur;

			public seq3_join(
				Altova.Mapforce.IMFNode var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq3_join closure;
				private IEnumerator var2_select_attributes;
				private IEnumerator var3_select_children;
				public Enumerator(seq3_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_select_attributes = (Altova.Functions.Core.SelectAttributes(closure.var1_cur)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_select_attributes.MoveNext()) { state = 3; goto case 3; }
							current = var2_select_attributes.Current;
							pos++;
							return true;
						case 3:
							state = 5;
							Altova.Mapforce.MFEnumerator.Dispose(var2_select_attributes); var2_select_attributes = null;
							var3_select_children = (Altova.Functions.Core.SelectChildren(closure.var1_cur)).GetEnumerator();
							goto case 5;
						case 5:
							state = 5;
							if (!var3_select_children.MoveNext()) { state = 6; goto case 6; }
							current = var3_select_children.Current;
							pos++;
							return true;
						case 6:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_select_children); var3_select_children = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_select_attributes); var2_select_attributes = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_select_children); var3_select_children = null;
				}
			}
		}
		class Outer : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Channel_Instance;

			public Outer(
				Altova.Mapforce.IMFNode var1_Channel_Instance
			)
			{
				this.var1_Channel_Instance = var1_Channel_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly Outer closure;
				private IEnumerator var2_Channel;
				public Enumerator(Outer closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_Channel = ((new main(closure.var1_Channel_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_Channel.MoveNext()) { state = 3; goto case 3; }
							current = var2_Channel.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_Channel); var2_Channel = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_Channel); var2_Channel = null;
				}
			}
		}

	}
}
